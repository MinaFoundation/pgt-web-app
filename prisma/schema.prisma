// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FundingRoundStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum WorkerStatus {
  RUNNING
  COMPLETED
  FAILED
  NOT_STARTED
}

model User {
  id        String     @id @db.Uuid // UUID v5 derived from authSource
  linkId    String     @db.Uuid // UUID v4 for account linking
  createdAt DateTime   @default(now()) @db.Timestamptz(6) // Timezone-aware timestamp
  updatedAt DateTime   @updatedAt @db.Timestamptz(6) // Timezone-aware timestamp
  metadata  Json // Flexible storage for user data
  proposals Proposal[] // Add relation to Proposal

  createdTopics            Topic[]               @relation("CreatedTopics")
  createdReviewerGroups    ReviewerGroup[]       @relation("CreatedReviewerGroups")
  createdFundingRounds     FundingRound[]        @relation("CreatedFundingRounds")
  reviewerGroupMemberships ReviewerGroupMember[]
  adminUser                AdminUser?

  considerationVotes         ConsiderationVote[]
  deliberationCommunityVotes CommunityDeliberationVote[]
  deliberationReviewerVotes  ReviewerDeliberationVote[]
  ocvConsiderationVote       OCVConsiderationVote?       @relation(fields: [oCVConsiderationVoteId], references: [id])
  oCVConsiderationVoteId     Int?
  feedback                   UserFeedback[]

  @@index([id])
  @@index([linkId])
}

model Proposal {
  id                     Int            @id @default(autoincrement())
  userId                 String         @db.Uuid
  fundingRoundId         String?        @db.Uuid // Optional because proposal starts as DRAFT
  status                 ProposalStatus @default(DRAFT)
  
  // Old fields (kept for migration)
  proposalName           String?        @db.VarChar(100)
  abstract               String?        @db.Text
  motivation             String?        @db.Text
  rationale              String?        @db.Text
  deliveryRequirements   String?        @db.Text
  securityAndPerformance String?        @db.Text
  budgetRequest          Decimal?       @db.Decimal(16, 2)
  
  // New fields (optional during migration)
  title                  String?        @db.VarChar(100) 
  proposalSummary        String?        @db.Text
  problemStatement       String?        @db.Text
  problemImportance      String?        @db.Text
  proposedSolution       String?        @db.Text
  implementationDetails  String?        @db.Text
  totalFundingRequired   Decimal?       @db.Decimal(16, 2)
  
  // Existing fields
  email                  String         @db.VarChar(254)
  createdAt              DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime       @updatedAt @db.Timestamptz(6)
  
  // New fields (optional during migration)
  keyObjectives          String?        @db.Text
  communityBenefits      String?        @db.Text
  keyPerformanceIndicators String?      @db.Text
  budgetBreakdown        String?        @db.Text
  estimatedCompletionDate DateTime?     @db.Timestamptz(6)
  milestones             String?        @db.Text
  teamMembers            String?        @db.Text
  relevantExperience     String?        @db.Text
  potentialRisks         String?        @db.Text
  mitigationPlans        String?        @db.Text
  discordHandle          String?        @db.VarChar(100)
  website                String?        @db.VarChar(255)
  githubProfile          String?        @db.VarChar(255)
  otherLinks             String?        @db.VarChar(1000)

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  fundingRound FundingRound? @relation(fields: [fundingRoundId], references: [id])

  considerationVotes          ConsiderationVote[]
  deliberationCommunityVotes  CommunityDeliberationVote[]
  deliberationReviewerVotes   ReviewerDeliberationVote[]
  OCVConsiderationVote        OCVConsiderationVote?
  GptSurveySummarizerProposal GptSurveySummarizerProposal?

  // Indexes
  @@index([userId])
  @@index([status])
  @@index([proposalName])
  @@index([title])
  @@index([createdAt])
  @@index([fundingRoundId])
}

enum ProposalStatus {
  DRAFT
  CONSIDERATION
  DELIBERATION
  VOTING
  APPROVED
  REJECTED
  WITHDRAWN
}

model Topic {
  id          String   @id @default(uuid()) @db.Uuid
  createdById String   @db.Uuid
  name        String   @db.VarChar(100)
  description String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  createdBy      User                 @relation("CreatedTopics", fields: [createdById], references: [id])
  reviewerGroups TopicReviewerGroup[]
  fundingRounds  FundingRound[]

  @@index([createdById])
}

model ReviewerGroup {
  id          String   @id @default(uuid()) @db.Uuid
  createdById String   @db.Uuid
  name        String   @db.VarChar(100)
  description String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  createdBy User                  @relation("CreatedReviewerGroups", fields: [createdById], references: [id])
  members   ReviewerGroupMember[]
  topics    TopicReviewerGroup[]

  @@index([createdById])
}

model ReviewerGroupMember {
  id              String   @id @default(uuid()) @db.Uuid
  reviewerGroupId String   @db.Uuid
  userId          String   @db.Uuid
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  reviewerGroup ReviewerGroup @relation(fields: [reviewerGroupId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id])

  @@unique([reviewerGroupId, userId])
  @@index([userId])
}

model TopicReviewerGroup {
  id              String   @id @default(uuid()) @db.Uuid
  topicId         String   @db.Uuid
  reviewerGroupId String   @db.Uuid
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  topic         Topic         @relation(fields: [topicId], references: [id], onDelete: Cascade)
  reviewerGroup ReviewerGroup @relation(fields: [reviewerGroupId], references: [id], onDelete: Cascade)

  @@unique([topicId, reviewerGroupId])
}

model FundingRound {
  id          String             @id @default(uuid()) @db.Uuid
  mefId       Int                @unique @default(autoincrement())
  createdById String             @db.Uuid
  topicId     String             @db.Uuid
  name        String             @db.VarChar(100)
  description String             @db.Text
  status      FundingRoundStatus @default(DRAFT)
  startDate   DateTime           @db.Timestamptz(6)
  endDate     DateTime           @db.Timestamptz(6)
  totalBudget Decimal            @db.Decimal(16, 2)
  createdAt   DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime           @updatedAt @db.Timestamptz(6)

  createdBy User       @relation("CreatedFundingRounds", fields: [createdById], references: [id])
  topic     Topic      @relation(fields: [topicId], references: [id])
  proposals Proposal[]

  submissionPhase    SubmissionPhase?
  considerationPhase ConsiderationPhase?
  deliberationPhase  DeliberationPhase?
  votingPhase        VotingPhase?

  @@index([createdById])
  @@index([status])
  @@index([startDate, endDate])
}

model ConsiderationPhase {
  id             String   @id @default(uuid()) @db.Uuid
  fundingRoundId String   @unique @db.Uuid
  startDate      DateTime @db.Timestamptz(6)
  endDate        DateTime @db.Timestamptz(6)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  fundingRound FundingRound @relation(fields: [fundingRoundId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
}

model DeliberationPhase {
  id             String   @id @default(uuid()) @db.Uuid
  fundingRoundId String   @unique @db.Uuid
  startDate      DateTime @db.Timestamptz(6)
  endDate        DateTime @db.Timestamptz(6)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  fundingRound FundingRound @relation(fields: [fundingRoundId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
}

model VotingPhase {
  id             String   @id @default(uuid()) @db.Uuid
  fundingRoundId String   @unique @db.Uuid
  startDate      DateTime @db.Timestamptz(6)
  endDate        DateTime @db.Timestamptz(6)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  fundingRound FundingRound @relation(fields: [fundingRoundId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
}

model SubmissionPhase {
  id             String   @id @default(uuid()) @db.Uuid
  fundingRoundId String   @unique @db.Uuid
  startDate      DateTime @db.Timestamptz(6)
  endDate        DateTime @db.Timestamptz(6)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  fundingRound FundingRound @relation(fields: [fundingRoundId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate])
}

model AdminUser {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])
}

enum ConsiderationDecision {
  APPROVED
  REJECTED
}

model ConsiderationVote {
  id         String                @id @default(uuid()) @db.Uuid
  proposalId Int
  voterId    String                @db.Uuid
  decision   ConsiderationDecision
  feedback   String                @db.Text
  createdAt  DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime              @updatedAt @db.Timestamptz(6)

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  voter    User     @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([proposalId, voterId])
  @@index([voterId])
}

model CommunityDeliberationVote {
  id         String   @id @default(uuid()) @db.Uuid
  proposalId Int
  userId     String   @db.Uuid
  feedback   String   @db.Text
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  proposal                    Proposal                     @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user                        User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  GptSurveySummarizerFeedback GptSurveySummarizerFeedback?

  @@unique([proposalId, userId])
  @@index([userId])
}

model ReviewerDeliberationVote {
  id             String   @id @default(uuid()) @db.Uuid
  proposalId     Int
  userId         String   @db.Uuid
  feedback       String   @db.Text
  recommendation Boolean
  createdAt      DateTime @default(now()) @db.Timestamptz(6)

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proposalId, userId])
  @@index([userId])
}

model OCVConsiderationVote {
  id         Int      @id @default(autoincrement())
  proposalId Int      @unique
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  voteData   Json
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  User       User[]

  @@index([proposalId])
}

model WorkerHeartbeat {
  id            String       @id @default(uuid()) @db.Uuid
  name          String       @db.VarChar(100) // For identifying job type
  lastHeartbeat DateTime     @updatedAt
  status        WorkerStatus @default(RUNNING)
  metadata      Json? // Optional JSON column for storing job-specific data
  createdAt     DateTime     @default(now())

  @@index([name, status])
}

model UserFeedback {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  feedback  String   @db.Text
  image     Bytes?   @db.ByteA // Optional binary data for screenshot, PostgreSQL BYTEA type
  metadata  Json // Flexible JSON storage for additional user data
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // Relation to User model
  user User @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([createdAt])
}

model GptSurveySummarizerProposal {
  id         String                        @id @default(cuid())
  proposal   Proposal                      @relation(fields: [proposalId], references: [id])
  proposalId Int                           @unique
  createdAt  DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime                      @updatedAt @db.Timestamptz(6)
  isSuccess  Boolean
  request    Json
  response   Json
  feedbacks  GptSurveySummarizerFeedback[]
  summary    String?
  summary_updated_at DateTime? @db.Timestamptz(6)
}

model GptSurveySummarizerFeedback {
  id                          String                      @id @default(cuid())
  communityDeliberationVote   CommunityDeliberationVote   @relation(fields: [communityDeliberationVoteId], references: [id])
  communityDeliberationVoteId String                      @unique @db.Uuid
  createdAt                   DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime                    @updatedAt @db.Timestamptz(6)
  isSuccess                   Boolean
  request                     Json
  response                    Json
  proposal                    GptSurveySummarizerProposal @relation(fields: [proposalId], references: [id])
  proposalId                  String
}
